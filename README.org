* Source Code

The source code for this project can be found at the github repo:

#+BEGIN_SRC 
https://github.com/ftravers/omn1
#+END_SRC

Go ahead and clone that now.

Throughout this tutorial you'll see sections like:

GIT BRANCH: some-name

To see the code corresponding to that section, just checkout the
branch by that name.

* In the beginning
** Overview

Lets start with the absolute bare bones setup.  We'll display one
value from an om-next client data store.

** App State

When I say data store, that is a glamorous word for a clojurescript
map wrapped in an atom.

#+BEGIN_SRC clojure
  (def app-state (atom {:name "Bob"}))
#+END_SRC

** Component

The word /component/ is often used to describe a chunk of logically
related html code.  For example a table is often written as two
components, one for the table heading and column headers, and another
component that is repeatedly used for each row.

** 1st Component

GIT BRANCH: simple-reading

Lets write the 'html' component that will display this greeting.

#+BEGIN_SRC clojure
(defui Greeter
  static om/IQuery
  (query [_] [:name])

  Object
  (render
   [this]
   (div nil "Hello " (:name (om/props this)))))
#+END_SRC

** The query

In this component we /query/ for ~[:name]~.  If you've checked out the
code and run it, you will see the logging in this component outputs:

#+BEGIN_SRC clojure
{:name "Bob"}
#+END_SRC

So from the components perspective, it asks for ~[:name]~ and it gets
back: ~{:name "Bob"}~ according to our ~app-state~:

#+BEGIN_SRC clojure
(def app-state (atom {:name "Bob"}))
#+END_SRC

** Reader

In om-next we write /reader/ functions.  These are the functions that
actually get the data for us.  Our reader function looks like this
mess:

#+BEGIN_SRC clojure
  (defmethod reader :default
    [{st :state} key _]
    {:value (key (om/db->tree [key] @st @st))})
#+END_SRC

Lets examine the output of the log statements:

#+BEGIN_SRC 
[DEFAULT READER KEY]: :name
#+END_SRC

So ~key~ has the value ~:name~.  So far this looks reasonable.

#+BEGIN_SRC
[STATE]: {:name "Bob"}
#+END_SRC

So ~@st~ is nothing other than our app-state.

~om/db->tree~ hydrates a query, the first argument, from the state
provided in the second/third arguments.  I'm actually a bit unclear
why this function takes state twice, maybe someone will enlighten ;).

#+BEGIN_SRC 
[OM DB->TREE]: {:name "Bob"}
#+END_SRC

Finally, the response is:

#+BEGIN_SRC 
[RESPONDING WITH]: 
{:value "Bob"}
#+END_SRC

This may be a bit surprising.  The reader returns ~{:value "Bob"}~,
but the component gets ~{:name "Bob"}~.  I'm not sure why this is
setup this way, but this is readers work.  They will replace the
keyword ~:value~ with the keyword in the ~key~ second parameter of the
function, which in our case is ~:name~.

** Other Wiring: Parser, Reconciler, add-root!

The rest of the code is boilerplate required to wire things up.  The
~parser~ wraps up the ~reader~ function.  The ~reconciler~ combines
the ~parser~ with the ~app-state~.  Finally ~om/add-root!~ combines
the root component with the reconciler and mounts it into the ~app~
html element in ~index.html~.

** Summary

This wraps up a basic /reading/ component in om-next.  Other tutorials
out there cover this stuff already, and arguably in better detail, but
I wanted to lay out a foundation for further discussions.

* Writing/Transacting/Mutating App State

Lets modify our value for name and see that get reflected in the
webpage.

First we write a mutate function:

#+BEGIN_SRC clojure
  (defmethod mutate 'new-name
    [{state :state} ky params]
    {:value {:keys (keys params)}
     :action #(swap! state merge params)})
#+END_SRC

And we can call it from the REPL like so:

#+BEGIN_SRC clojure
  (om.next/transact! reconciler '[(new-name {:name "joe"})])
#+END_SRC

Mutate functions should return a map with two keys ~:value~ and
~:action~.  ~:value~ should be a map of the keys that are going to be
updated by this transaction.  This helps om-next refresh those parts
of the DOM that are connected to the values contained in those keys.

~:action~ should return a function that moves the app-state atom from
its current value to a new value.

So now we can modify in our app-state atom as om-next wants us to.

GIT BRANCH: simple-mutate

Let's now look out how we'd integrate an external server into our
setup.

* Datomic remotes

To setup a remote we create a function like so:

#+BEGIN_SRC clojure
  (defn make-remote-req
    [qry cb]
    (cb {:name "Fred"}))

  (defmethod reader :default
    [{st :state} key _]
    (log "default reader" key)
    {:value (key (om/db->tree [key] @st @st))
     :remote true                         ; This is added
     })

  (def reconciler
    (om/reconciler
     {:state app-state
      :parser parser
      :send make-remote-req               ; This is added
      }))
#+END_SRC

So here we define a function that is our remote call.  It just calls
the callback ~cb~ with the data to be merged into the ~@app-state~.

The other two parts are the wiring.

GIT BRANCH: remote-integration

Now that we have the basics of reading/writing to the local app-state,
and have simulated reading from the remote state, let's try to create
a more realistic example.  The login use-case.

* Om-next login

The way this login will work is that there will be username and
password field along with a submit button.  This will submit both to
the server and the server will respond with a user valid/invalid
response.  First we'll simulate this without a backend.

GIT BRANCH: login-step1


* THE REMAINDER IS WORK IN PROGRESS - IGNORE

* Om Next plus Datomic Tutorial

This tutorial will simulate a data flow between om-next and datomic.
A user will enter a car make, like BMW or Toyota, and a list of models
will be sent from the backend to the front end.

** Om Next Data Model

On the front end we'll model this with the following map structure:

#+BEGIN_SRC clojure
  {:current/car
   {:car/make "Toyota"
    :make/models [{:model "Tacoma"}
                  {:model "Tercel"}]}}
#+END_SRC

** Datomic Modeling

To support this on the datomic side we'll have data stored like:

#+BEGIN_SRC clojure
  [{:car/make "Toyota"
    :make/models [{:model "Tacoma"}
                  {:model "Tercel"}]}
   {:car/make "BMW"
    :make/models [{:model "325xi"}
                  {:model "x5"}]}]
#+END_SRC

Our pull pattern in our query will look like:

#+BEGIN_SRC clojure
[{:make/models [:model]}]
#+END_SRC

** Om Next UI

The queries of our Om Next components are:

#+BEGIN_SRC clojure
(defui CarModel
  (query [this] [:model])
(defui CarRoot
  (query [this] [:current/car {:make/models (om/get-query CarModel)}])
#+END_SRC

** Compare Queries

Om Next Query

#+BEGIN_SRC clojure
[:current/car {:make/models [:model]}]
#+END_SRC

Datomic Pull Pattern

#+BEGIN_SRC clojure
[{:make/models [:model]}]
#+END_SRC

* Datomic Again

So our query on the datomic takes in a make as a variable and returns
the associated models.

We could say the input would be two values.  The first is the where
clause.  Get the entity who's ~:car/make~ attribute has the value
~Toyota~.  We can express this with a datomic where clause that looks
like:

#+BEGIN_SRC clojure
  [?e :car/make "Toyota"]
#+END_SRC

In this case, the found entity is stored in the variable ~?e~.  

Next we have to say, with this found entity, what data of it do we
want back?  Remember the shape of the data in Datomic looks like:

#+BEGIN_SRC clojure
  [{:car/make "Toyota"
    :make/models [{:model "Tacoma"}
                  {:model "Tercel"}]}
   {:car/make "BMW"
    :make/models [{:model "325xi"}
                  {:model "x5"}]}]
#+END_SRC

So we can say, well, we want the associate model names.  A pull
pattern that looks like this:

#+BEGIN_SRC clojure
  [{:make/models [:model]}]
#+END_SRC

or more completely:

#+BEGIN_SRC clojure
  '[(pull ?e [{:make/models [:model]}]) ...]
#+END_SRC

which basically reads: from the found entity ~?e~ find the reference
attribute ~:make/models~.  Follow that reference, and from the found
children entities, get the values for the ~:model~ attribute.

When we run this in datomic we predictably get the pull pattern
/filled/ out:

#+BEGIN_SRC clojure
#:make{:models [{:model "Tacoma"} {:model "Tercel"}]}
#+END_SRC


** Om Next Reader Return Value

If I query for a key, then the returned value from the reader function
should be a map with a key 
